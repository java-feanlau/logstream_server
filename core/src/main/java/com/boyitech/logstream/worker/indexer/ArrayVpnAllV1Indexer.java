package com.boyitech.logstream.worker.indexer;import com.boyitech.logstream.core.info.Event;import com.boyitech.logstream.core.util.GrokUtil;import com.boyitech.logstream.core.util.GsonHelper;import com.boyitech.logstream.core.util.IndexerTimeUtils;import com.boyitech.logstream.core.util.MetafieldHelper;import com.boyitech.logstream.core.worker.BaseWorkerConfig;import com.boyitech.logstream.core.worker.indexer.BaseIndexer;import com.boyitech.logstream.core.worker.indexer.BaseIndexerConfig;import com.boyitech.logstream.core.worker.shipper.syslog.SyslogShipperConfig;import io.krakens.grok.api.Grok;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.Locale;import java.util.Map;/** * @author Eric * @Title: SbsDeviceVpnIndexer * @date 2018/12/11 11:15 * @Description: TODO */public class ArrayVpnAllV1Indexer extends BaseIndexer {    private String[] patterns1;    private String[] patterns2;    private String pattern1;    private String pattern2;    private String pattern3;    private String[] patterns4;    private ArrayList<Grok> groks1;    private ArrayList<Grok> groks2;    private Grok grok1;    private Grok grok2;    private Grok grok3;    private ArrayList<Grok>groks4;    private BaseIndexerConfig config;    public ArrayVpnAllV1Indexer(BaseWorkerConfig config) {        super(config);        this.config = (BaseIndexerConfig) config;    }    public ArrayVpnAllV1Indexer(String indexerID, BaseWorkerConfig config) {        super(indexerID, config);        this.config = (BaseIndexerConfig) config;    }    @Override    public boolean register() {        patterns1 = new String[]{                "id=ArrayOS time=\"(?<time>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME})\"(\\s+)timezone=%{DATA:time_zone}(\\s+)fw=(?<fw>\\S+)(\\s+)%{DATA:vpn_log_body}$",                "%{NOTSPACE:type} %{NUMBER:LongTime} %{NUMBER:receive_byte} =%{NOTSPACE:user} %{IP:ip} %{NOTSPACE:msg} %{NUMBER:sent_byte} %{NOTSPACE:method} %{NOTSPACE:uri} %{DATA:padding}$"        };        patterns2 = new String[]{                "level=%{DATA:level_type}(\\s+)eid=(?<eid>.*)(\\s+)user=(?<user>.*)(\\s+)device=(?<device>.*)(\\s+)src=%{IP:src_ip}(\\s+)sport=%{NUMBER:sport}(\\s+)type=vpn msg=(\")(?<msg>.*)(\")",                "level=%{DATA:level_type}(\\s+)eid=(?<eid>\\S+)(\\s+)user=(?<user>\\S+)(\\s+)device=(?<device>.*)type=vpn msg=(\")(?<msg>.*)(\")"        };        pattern1 = "pri=%{NOTSPACE:pri_type}(\\s+)%{DATA:pri_log_body}$";        pattern2 = "user=(?<user>\\S+)\\s+msg=\"(?<msg>.*)\"";        pattern3 = "(user=(?<user>\\S+)\\s+|)(proto=(?<proto>\\S+)(\\s+)|)(src=%{IP:src_ip}(\\s+)|)(sport=%{NUMBER:sport}(\\s+)|)(dst=%{IP:dst_ip}(\\s+)|)(dport=%{NUMBER:dport}(\\s+)|)(type=vpn revd=%{NOTSPACE:receive_byte}\\s+|)(sent=%{NOTSPACE:sent_byte}\\s+|)msg=(\")(?<msg>.*)(\")";        patterns4= new String[]{                "user=(%{DATA:user})\\s+proto=(%{DATA:proto})(\\s+)src=(%{IP:src_ip})(\\s+)sport=(%{GREEDYDATA:sport})(\\s+)dst=(%{IP:dst_ip})(\\s+)dport=(%{GREEDYDATA:dport})(\\s+)type=vpn msg=(\\\")(%{GREEDYDATA:msg})(\\\")",                "user=(%{DATA:user})\\s+proto=(%{DATA:proto})(\\s+)src=(%{IP:src_ip})(\\s+)sport=(%{GREEDYDATA:sport})(\\s+)dst=(%{IP:dst_ip})(\\s+)dport=(%{GREEDYDATA:dport})(\\s+)type=vpn revd=(%{NOTSPACE:receive_byte})\\s+sent=(%{NOTSPACE:sent_byte})(\\s+)msg=\\\\\"%{GREEDYDATA}\\\\\"",                "user=(%{DATA:user})\\s+proto=(%{DATA:proto})(\\s+)src=(%{IP:src_ip})(\\s+)dst=(%{IP:dst_ip})(\\s+)type=vpn revd=(%{DATA:receive_byte})\\s+sent=(%{DATA:sent_byte})\\s+msg=(\\\")(%{GREEDYDATA:msg})(\\\")",                "user=(%{DATA:user})proto=(%{DATA:proto})(\\s+)src=(%{IP:src_ip})(\\s+)(sport=(%{GREEDYDATA:sport})(\\s+)){0,1}dst=(%{IP:dst_ip})(\\s+)(dport=(%{GREEDYDATA:dport})(\\s+)){0,1}type=vpn revd=(%{DATA:receive_byte})\\s+sent=(%{DATA:sent_byte})\\s+msg=(\\\")(%{GREEDYDATA:msg})(\\\")",                "proto=(%{DATA:proto})(\\s+)src=(%{IP:src_ip})(\\s+)(sport=(%{GREEDYDATA:sport})(\\s+)){0,1}dst=(%{IP:dst_ip})(\\s+)(dport=(%{GREEDYDATA:dport})(\\s+)){0,1}type=vpn revd=(%{DATA:receive_byte})\\s+sent=(%{DATA:sent_byte})\\s+msg=(\\\")(%{GREEDYDATA:msg})(\\\")",                "user=(%{DATA:user})\\s+src=(%{IP:src_ip})(\\s+)sport=(%{GREEDYDATA:sport})(\\s+)dport=(%{GREEDYDATA:dport})(\\s+)dstname=%{DATA:dstname}(\\s+)arg=%{NOTSPACE:arg}(\\s+)rcvd=%{DATA:rvcd}(\\s+)type=vpn msg=(\\\")(%{GREEDYDATA:msg})(\\\")",                "user=(%{DATA:user})\\s+src=(%{IP:src_ip})(\\s+)sport=(%{GREEDYDATA:sport})(\\s+)dst=(%{IP:dst_ip})(\\s+)dport=(%{GREEDYDATA:dport})(\\s+)type=mgmt msg=(\\\")(%{GREEDYDATA:msg})(\\\")",                "user=(%{DATA:user})\\s+msg=(\\\")(%{GREEDYDATA:msg})(\\\")"        };        grok1 = GrokUtil.getGrok(pattern1);        grok2 = GrokUtil.getGrok(pattern2);        grok3 = GrokUtil.getGrok(pattern3);        groks4 = GrokUtil.getGroks(patterns4);        groks1 = GrokUtil.getGroks(patterns1);        groks2 = GrokUtil.getGroks(patterns2);        return true;    }    @Override    public boolean format(Event event) {        String message = event.getMessage();        message=message.replaceAll("\\u0000", "");//去除异常字符；        Map<String, Object> map = GrokUtil.getMapByGroks(groks1, message);        Map<String, Object> format = event.getFormat();        format.put("message", message);        format.putAll(map);        if (format.get("flag") == null && format.get("flag") != "解析失败") {           // event.setMetafieldLoglevel("1");            event.setMetafieldLoglevel("1");        }        String vpn_log_body = (String) format.get("vpn_log_body");        String type = (String) format.get("type");        if (vpn_log_body != null && vpn_log_body.contains("pri")) {            format.put("Metafield_category", "pri");            Map<String, Object> map1 = GrokUtil.getMap(grok1, vpn_log_body);            format.putAll(map1);            if (format.get("flag") == null && format.get("flag") != "解析失败") {                //event.setMetafieldLoglevel("2");                event.setMetafieldLoglevel("1");            }            String pri_type = (String) map1.get("pri_type");            String pri_log_body = (String) map1.get("pri_log_body");            Map<String, Object> map2 = null;            if (pri_type.equals("3")) {                map2 = GrokUtil.getMap(grok2, pri_log_body);            }            if (pri_type.equals("5")) {                map2 = GrokUtil.getMap(grok3, pri_log_body);                System.out.println(map2);            }            if(pri_type.equals("6")){                map2=GrokUtil.getMapByGroks(groks4,pri_log_body);            }            format.putAll(map2);            if (format.get("flag") == null && format.get("flag") != "解析失败") {              //  event.setMetafieldLoglevel("3");                event.setMetafieldLoglevel("3");            }        } else if (type != null && type.contains("AN_SQUID_LOG")) {            format.put("Metafield_category", "AN_SQUID_LOG");            String LongTime = (String) format.get("LongTime");            String replace = LongTime.replace(".", "");            Date date = new Date(Long.valueOf(replace));            //2019-1-1 21:31:03            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.US);            String format1 = sdf.format(date);            format.put("time", format1);        } else {            format.put("Metafield_category", "another");            Map<String, Object> map1 = GrokUtil.getMapByGroks(groks2, vpn_log_body);            format.putAll(map1);            if (format.get("flag") == null && format.get("flag") != "解析失败") {               // event.setMetafieldLoglevel("2");                event.setMetafieldLoglevel("2");            }        }        //进行ip过滤判断        if (!config.getIpFilter().equals("null")) {            GrokUtil.filterGeoIP(config, format);        } else {            GrokUtil.setGeoIP2(format, "src_ip");            GrokUtil.setGeoIP2(format, "dst_ip");        }        String timestamp = (String) format.get("time");        if (timestamp != null && timestamp.trim().length() != 0) {            Date time = new Date();            //2018-12-3 07:22:47            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.US);            try {                time = sdf.parse(timestamp);            } catch (ParseException e) {                LOGGER.error("@timestamp时间格式化出错");            }            SimpleDateFormat sdf2 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssXXX");            timestamp = sdf2.format(time);            format.put("@timestamp", timestamp);        }        //格式化Metafield        MetafieldHelper.setMetafield(event,"src_ip","dst_ip","",format);        if (event.getSource() != null) {            format.put("log_source",event.getSource());//增加来源设备标识；        }        if (format.get("flag") == "解析失败")            return false;        return true;    }    @Override    public void tearDown() {    }    public static Map getMapping() {        String mapping = "{\"properties\":{"                + "\"@timestamp\":{\"type\":\"date\",\"format\":\"dateOptionalTime\"},"                + "\"received_at\":{\"type\":\"date\",\"format\":\"dateOptionalTime\"},"                + "\"portedAt\":{\"type\":\"date\",\"format\":\"dateOptionalTime\"},"                + "\"flag\":{\"type\":\"keyword\"},"                + "\"message\":{\"type\":\"text\"},"                + "\"log_source\":{\"type\":\"keyword\"},"                + "\"time\":{\"type\":\"keyword\"},"                + "\"time_zone\":{\"type\":\"keyword\"},"                + "\"fw\":{\"type\":\"keyword\"},"                + "\"vpn_log_body\":{\"type\":\"keyword\"},"                + "\"type\":{\"type\":\"keyword\"},"                + "\"LongTime\":{\"type\":\"keyword\"},"                + "\"receive_byte\":{\"type\":\"integer\"},"                + "\"user\":{\"type\":\"keyword\"},"                + "\"ip\":{\"type\":\"ip\"},"                + "\"msg\":{\"type\":\"keyword\"},"                + "\"sendByte\":{\"type\":\"integer\"},"                + "\"method\":{\"type\":\"keyword\"},"                + "\"uri\":{\"type\":\"keyword\"},"                + "\"padding\":{\"type\":\"keyword\"},"                + "\"pri_type\":{\"type\":\"keyword\"},"                + "\"pri_log_body\":{\"type\":\"keyword\"},"                + "\"proto\":{\"type\":\"keyword\"},"                + "\"src_ip\":{\"type\":\"ip\"},"                + "\"dst_ip\":{\"type\":\"ip\"},"                + "\"sport\":{\"type\":\"integer\"},"                + "\"dport\":{\"type\":\"integer\"},"                + "\"level_type\":{\"type\":\"keyword\"},"                + "\"eid\":{\"type\":\"keyword\"},"                + "\"src_ip_geoip\": {"                + "\"properties\": {"                + "\"location\": {\"type\": \"geo_point\"},"                + "\"city_name\": {\"type\": \"keyword\"},"                + "\"continent_code\": {\"type\": \"keyword\"},"                + "\"country_code2\": {\"type\": \"keyword\"},"                + "\"country_code3\": {\"type\": \"keyword\"},"                + "\"country_name\": {\"type\": \"keyword\"},"                + "\"dma_code\": {\"type\": \"keyword\"},"                + "\"ip\": {\"type\": \"ip\"},"                + "\"latitude\": {\"type\": \"float\"},"                + "\"longitude\": {\"type\": \"float\"},"                + "\"postal_code\": {\"type\": \"keyword\"},"                + "\"region_name\": {\"type\": \"keyword\"},"                + "\"timezone\": {\"type\": \"keyword\"}"                + "}"                + "},"                + "\"dst_ip_geoip\": {"                + "\"properties\": {"                + "\"location\": {\"type\": \"geo_point\"},"                + "\"city_name\": {\"type\": \"keyword\"},"                + "\"continent_code\": {\"type\": \"keyword\"},"                + "\"country_code2\": {\"type\": \"keyword\"},"                + "\"country_code3\": {\"type\": \"keyword\"},"                + "\"country_name\": {\"type\": \"keyword\"},"                + "\"dma_code\": {\"type\": \"keyword\"},"                + "\"ip\": {\"type\": \"ip\"},"                + "\"latitude\": {\"type\": \"float\"},"                + "\"longitude\": {\"type\": \"float\"},"                + "\"postal_code\": {\"type\": \"keyword\"},"                + "\"region_name\": {\"type\": \"keyword\"},"                + "\"timezone\": {\"type\": \"keyword\"}"                + "}"                + "},"                + "\"device\":{\"type\":\"keyword\"},"                + "\"Metafield_type\":{\"type\":\"keyword\"},"                + "\"Metafield_category\":{\"type\":\"keyword\"},"                + "\"Metafield_subject\":{\"type\":\"keyword\"},"                + "\"Metafield_object\":{\"type\":\"keyword\"},"                + "\"Metafield_loglevel\":{\"type\":\"keyword\"},"                + "\"Metafield_source\":{\"type\":\"keyword\"},"                + "\"Metafield_description\":{\"type\":\"text\", \"fields\": {\"raw\": {\"type\": \"keyword\"}}}"                + "}"                + "}";        return GsonHelper.fromJson(mapping);    }    public static String getMappingString() {        String mapping = "{\"properties\":{"                + "\"@timestamp\":{\"type\":\"date\",\"format\":\"dateOptionalTime\"},"                + "\"received_at\":{\"type\":\"date\",\"format\":\"dateOptionalTime\"},"                + "\"portedAt\":{\"type\":\"date\",\"format\":\"dateOptionalTime\"},"                + "\"flag\":{\"type\":\"keyword\"},"                + "\"message\":{\"type\":\"text\"},"                + "\"log_source\":{\"type\":\"keyword\"},"                + "\"time\":{\"type\":\"keyword\"},"                + "\"time_zone\":{\"type\":\"keyword\"},"                + "\"fw\":{\"type\":\"keyword\"},"                + "\"vpn_log_body\":{\"type\":\"keyword\"},"                + "\"type\":{\"type\":\"keyword\"},"                + "\"LongTime\":{\"type\":\"keyword\"},"                + "\"receive_byte\":{\"type\":\"integer\"},"                + "\"user\":{\"type\":\"keyword\"},"                + "\"ip\":{\"type\":\"ip\"},"                + "\"msg\":{\"type\":\"keyword\"},"                + "\"sendByte\":{\"type\":\"integer\"},"                + "\"method\":{\"type\":\"keyword\"},"                + "\"uri\":{\"type\":\"keyword\"},"                + "\"padding\":{\"type\":\"keyword\"},"                + "\"pri_type\":{\"type\":\"keyword\"},"                + "\"pri_log_body\":{\"type\":\"keyword\"},"                + "\"proto\":{\"type\":\"keyword\"},"                + "\"src_ip\":{\"type\":\"ip\"},"                + "\"dst_ip\":{\"type\":\"ip\"},"                + "\"sport\":{\"type\":\"integer\"},"                + "\"dport\":{\"type\":\"integer\"},"                + "\"level_type\":{\"type\":\"keyword\"},"                + "\"eid\":{\"type\":\"keyword\"},"                + "\"client_ip_geoip\": {"                + "\"properties\": {"                + "\"location\": {\"type\": \"geo_point\"},"                + "\"city_name\": {\"type\": \"keyword\"},"                + "\"continent_code\": {\"type\": \"keyword\"},"                + "\"country_code2\": {\"type\": \"keyword\"},"                + "\"country_code3\": {\"type\": \"keyword\"},"                + "\"country_name\": {\"type\": \"keyword\"},"                + "\"dma_code\": {\"type\": \"keyword\"},"                + "\"ip\": {\"type\": \"ip\"},"                + "\"latitude\": {\"type\": \"float\"},"                + "\"longitude\": {\"type\": \"float\"},"                + "\"postal_code\": {\"type\": \"keyword\"},"                + "\"region_name\": {\"type\": \"keyword\"},"                + "\"timezone\": {\"type\": \"keyword\"}"                + "}"                + "},"                + "\"device\":{\"type\":\"keyword\"},"                + "\"Metafield_type\":{\"type\":\"keyword\"},"                + "\"Metafield_category\":{\"type\":\"keyword\"},"                + "\"Metafield_subject\":{\"type\":\"keyword\"},"                + "\"Metafield_object\":{\"type\":\"keyword\"},"                + "\"Metafield_loglevel\":{\"type\":\"keyword\"},"                + "\"Metafield_source\":{\"type\":\"keyword\"},"                + "\"Metafield_description\":{\"type\":\"text\", \"fields\": {\"raw\": {\"type\": \"keyword\"}}}"                + "}"                + "}";        return mapping;    }}